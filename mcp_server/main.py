# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:29:29+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import Address, ApiPersonNumberGetResponse, Lifestory, Person

app = MCPProxy(
    title='OpenAPI definition',
    version='v0',
    servers=[
        {'description': 'Generated server url', 'url': 'http://peoplegeneratorapi.live'}
    ],
)


@app.get('/api/address', tags=['personal_info_management'])
def generate_address():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/address/', tags=['personal_info_management'])
def generate_address_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/lifestory', tags=['personal_info_management', 'compressed_person_info'])
def generate_life_story_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/lifestory/', tags=['personal_info_management', 'demographic_data_handling']
)
def generate_life_story():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person', tags=['personal_info_management', 'demographic_data_handling'])
def get_person_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/', tags=['personal_info_management'])
def get_person():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/age', tags=['personal_info_management'])
def age_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/age/', tags=['personal_info_management'])
def age():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/bloodtype', tags=['personal_info_management'])
def bloodtype_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/person/bloodtype/',
    tags=[
        'personal_info_management',
        'personal_data_retrieval',
        'demographic_data_handling',
    ],
)
def bloodtype():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/creditcardnumber', tags=['personal_info_management'])
def creditcardnumber():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/creditcardnumber/', tags=['personal_info_management'])
def creditcardnumber_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/person/creditscore',
    tags=['personal_info_management', 'compressed_person_info'],
)
def creditscore_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/creditscore/', tags=['personal_info_management'])
def creditscore():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/email', tags=['personal_info_management'])
def email():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/email/', tags=['personal_info_management'])
def email_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/eyecolor', tags=['personal_info_management'])
def eyecolor_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/person/eyecolor/', tags=['personal_info_management', 'compressed_person_info']
)
def eyecolor():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/gender', tags=['personal_info_management'])
def gender():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/gender/', tags=['personal_info_management'])
def gender_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/gpa', tags=['personal_info_management'])
def gpa():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/gpa/', tags=['personal_info_management'])
def gpa_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/haschildren', tags=['personal_info_management'])
def haschildren_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/haschildren/', tags=['personal_info_management'])
def haschildren():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/person/hasdegree',
    tags=[
        'personal_info_management',
        'personal_data_retrieval',
        'demographic_data_handling',
    ],
)
def hasdegree():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/hasdegree/', tags=['personal_info_management'])
def hasdegree_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/height', tags=['personal_info_management'])
def height():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/height/', tags=['personal_info_management'])
def height_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/income', tags=['personal_info_management'])
def income():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/income/', tags=['personal_info_management'])
def income_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/job', tags=['personal_info_management'])
def job():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/job/', tags=['personal_info_management'])
def job_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/maritalstatus', tags=['personal_info_management'])
def maritalstatus_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/maritalstatus/', tags=['personal_info_management'])
def maritalstatus():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/name', tags=['personal_info_management'])
def name_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/name/', tags=['personal_info_management'])
def name():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/politicalleaning', tags=['personal_info_management'])
def political_leaning():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/politicalleaning/', tags=['personal_info_management'])
def political_leaning_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/religion', tags=['personal_info_management'])
def religion_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/religion/', tags=['personal_info_management'])
def religion():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/username', tags=['financial_info_generation'])
def username_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/username/', tags=['personal_info_management'])
def username():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/weight', tags=['personal_info_management'])
def weight():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/weight/', tags=['personal_info_management'])
def weight_1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/{number}', tags=['personal_data_retrieval'])
def get_compressed_person_1(number: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/person/{number}/', tags=['personal_info_management'])
def get_compressed_person(number: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
